// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(SENIOR)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Profile information
  bio           String?
  location      String?
  phoneNumber   String?
  
  // Relationships
  sessions      Session[]
  accounts      Account[]
  volunteerProfile VolunteerProfile?
  seniorProfile    SeniorProfile?
  webinars      Webinar[]
  forumPosts    ForumPost[]
  forumComments ForumComment[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model VolunteerProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id])
  certifications    String[]
  expertise         String[]
  availability      Json?
  totalHours        Int      @default(0)
  rating            Float    @default(0)
  completedSessions Session[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model SeniorProfile {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id])
  interests     String[]
  learningGoals String[]
  sessions      Session[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Webinar {
  id          String   @id @default(cuid())
  title       String
  description String
  date        DateTime
  duration    Int      // in minutes
  hostId      String
  host        User     @relation(fields: [hostId], references: [id])
  attendees   Json?    // Array of user IDs
  recording   String?  // URL to recording
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ForumPost {
  id        String   @id @default(cuid())
  title     String
  content   String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  comments  ForumComment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ForumComment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  post      ForumPost @relation(fields: [postId], references: [id])
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id              String   @id @default(cuid())
  volunteerId     String
  volunteer       VolunteerProfile @relation(fields: [volunteerId], references: [id])
  seniorId        String
  senior          SeniorProfile @relation(fields: [seniorId], references: [id])
  date            DateTime
  duration        Int      // in minutes
  status          SessionStatus @default(SCHEDULED)
  notes           String?
  feedback        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

enum UserRole {
  SENIOR
  VOLUNTEER
  ADMIN
}

enum SessionStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
} 